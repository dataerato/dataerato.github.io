{"version":3,"sources":["pages/EditPage/EditDataVideos/EditPage.js","pages/EditPage/EditDataVideos/index.js"],"names":["EditPage","className","React","Component","connect","state","schema","facts","relations","data","title","resultCoverage","fileName","real_filename","storyParameter","maxStoryLength","rewardWeight","aggregationLevel","generateProgress","hoverFactIndex","dispatch","visualizeData","dataAction","changeData","uploadData","addFact","factAction","updateFact","index","fact","deleteFact","orderFacts","sourceIndex","destinationIndex","selectFact","storyAction","generateStory","coverage","updateProgress","totalLength","currentLength","changeMethod","method","setStoryParameter","information","chartDiversity","timeLimit","setRewardWeight","logicality","diversity","integrity","setAggregationLevel","level","changeTitle"],"mappings":"kNAIqBA,G,8KAEb,OACI,yBAAKC,UAAU,6B,GAHWC,IAAMC,a,sDCJ5C,gEA+CeC,uBAxCS,SAACC,GAAD,MAAY,CAChCC,OAAQA,YAAOD,GACfE,MAAOA,YAAMF,GACbG,UAAWA,YAAUH,GACrBI,KAAMA,YAAKJ,GACXK,MAAOA,YAAML,GACbM,eAAgBA,YAAeN,GAC/BO,SAAUA,YAASP,GACnBQ,cAAeA,YAAcR,GAC7BS,eAAgBA,YAAeT,GAC/BU,eAAgBA,YAAeV,GAC/BW,aAAcA,YAAaX,GAC3BY,iBAAkBA,YAAiBZ,GACnCa,iBAAkBA,YAAiBb,GACnCc,eAAgBA,YAAed,OAGR,SAAAe,GACvB,MAAO,CAEHC,cAAe,SAACZ,GAAD,OAAUW,EAASE,IAAyBb,KAC3Dc,WAAY,SAACX,EAAUC,GAAX,OAA6BO,EAASE,IAAsBV,EAAUC,KAClFW,WAAY,SAACZ,EAAUC,EAAeP,EAAQG,GAAlC,OAA2CW,EAASE,IAAsBV,EAAUC,EAAeP,EAAQG,KAEvHgB,QAAS,kBAAML,EAASM,QACxBC,WAAY,SAACC,EAAOC,GAAR,OAAiBT,EAASM,IAAsBE,EAAOC,KACnEC,WAAY,SAACF,GAAD,OAAWR,EAASM,IAAsBE,KACtDG,WAAY,SAACC,EAAaC,GAAd,OAAmCb,EAASM,IAAsBM,EAAaC,KAE3FC,WAAY,SAACN,GAAD,OAAWR,EAASe,IAAuBP,KACvDQ,cAAe,SAAC7B,EAAOC,EAAW6B,GAAnB,OAAgCjB,EAASe,IAA0B5B,EAAOC,EAAW6B,KACpGC,eAAgB,SAACC,EAAaC,GAAd,OAAgCpB,EAASe,IAA2BI,EAAaC,KACjGC,aAAc,SAACC,GAAD,OAAYtB,EAASe,IAAyBO,KAC5DC,kBAAmB,SAAC5B,EAAgB6B,EAAaC,EAAgBC,GAA9C,OAA4D1B,EAASe,IAA8BpB,EAAgB6B,EAAaC,EAAgBC,KACnKC,gBAAiB,SAACC,EAAYC,EAAWC,GAAxB,OAAsC9B,EAASe,IAA4Ba,EAAYC,EAAWC,KACnHC,oBAAqB,SAACC,GAAD,OAAWhC,EAASe,IAAgCiB,KACzEC,YAAa,SAAC3C,GAAD,OAAWU,EAASe,IAAwBzB,QAIlDN,CAA6CJ","file":"static/js/18.65004e16.chunk.js","sourcesContent":["import React from 'react'\n\nimport './EditPage.less'\n\nexport default class EditPage extends React.Component {\n    render() {\n        return (\n            <div className='datavideos-edit-page'>\n            </div>\n        )\n    }\n}","import { connect } from 'react-redux';\nimport { fileName, real_filename, schema, relations, storyParameter, maxStoryLength, data, resultCoverage, aggregationLevel, facts, rewardWeight, title, generateProgress, hoverFactIndex } from '@/selector/story';\nimport * as dataAction from '@/action/dataAction';\nimport * as factAction from '@/action/factAction';\nimport * as storyAction from '@/action/storyAction';\nimport EditPage from './EditPage';\n\nconst mapStateToProps = (state) => ({\n    schema: schema(state),\n    facts: facts(state),\n    relations: relations(state),\n    data: data(state),\n    title: title(state),\n    resultCoverage: resultCoverage(state),\n    fileName: fileName(state),\n    real_filename: real_filename(state),\n    storyParameter: storyParameter(state),\n    maxStoryLength: maxStoryLength(state),\n    rewardWeight: rewardWeight(state),\n    aggregationLevel: aggregationLevel(state),\n    generateProgress: generateProgress(state),\n    hoverFactIndex: hoverFactIndex(state)\n})\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        //data\n        visualizeData: (data) => dispatch(dataAction.visualizeData(data)),\n        changeData: (fileName, real_filename) => dispatch(dataAction.changeData(fileName, real_filename)),\n        uploadData: (fileName, real_filename, schema, data) => dispatch(dataAction.uploadData(fileName, real_filename, schema, data)),\n        //fact\n        addFact: () => dispatch(factAction.addFact()),\n        updateFact: (index, fact) => dispatch(factAction.updateFact(index, fact)),\n        deleteFact: (index) => dispatch(factAction.deleteFact(index)),\n        orderFacts: (sourceIndex, destinationIndex) => dispatch(factAction.orderFacts(sourceIndex, destinationIndex)),\n        //story\n        selectFact: (index) => dispatch(storyAction.selectFact(index)),\n        generateStory: (facts, relations, coverage) => dispatch(storyAction.generateStory(facts, relations, coverage)),\n        updateProgress: (totalLength, currentLength) => dispatch(storyAction.updateProgress(totalLength, currentLength)),\n        changeMethod: (method) => dispatch(storyAction.changeMethod(method)),\n        setStoryParameter: (maxStoryLength, information, chartDiversity, timeLimit) => dispatch(storyAction.setStoryParameter(maxStoryLength, information, chartDiversity, timeLimit)),\n        setRewardWeight: (logicality, diversity, integrity) => dispatch(storyAction.setRewardWeight(logicality, diversity, integrity)),\n        setAggregationLevel: (level) => dispatch(storyAction.setAggregationLevel(level)),\n        changeTitle: (title) => dispatch(storyAction.changeTitle(title)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditPage);\n"],"sourceRoot":""}