{"version":3,"sources":["tool/hcluster.js","tool/factAggRule.js","tool/factAggregation.js","tool/tree.js","selector/story.js","action/factAction.js","action/storyAction.js","tool/distance.js","action/dataAction.js"],"names":["HierarchicalClustering","distance","linkage","threshold","this","undefined","Infinity","prototype","cluster","items","snapshotPeriod","snapshotCb","clusters","dists","mins","index","i","length","value","key","size","j","dist","merged","mergeClosest","forEach","minKey","min","c1","c2","left","right","splice","ci","key1","key2","factAggRules","storyAggregation","original_facts","aggregationLevel","facts","slice","aggregated","aggregatedFact","doubleNodes","getLeafNodes","tree","nodes","leftLeafNodes","rightLeafNodes","push","snapshot","snapshotCallback","factDistance","hcluster","filter","x","sort","a","b","factSimilarity","aggregationCount","parseInt","aggFacts","aggFact","firstIndex","secondIndex","factAggregation","f1","f2","rule","type","compoundFact","_","cloneDeep","compoundType","compoundChart","ChartType","JUXTAPOSITION","score","chart","STACKED_BAR_CHART","STACKED_LINE_CHART","eqSet","Set","measure","map","subspace","groupby","focus","as","bs","has","fileName","state","story","real_filename","title","subtitle","data","schema","generateUrl","filters","filtersTitle","datares","schemaFilter","filtersChangeFlag","filtersLocal","filtersTitleLocal","dataresLocal","schemaFilterLocal","filtersOrigin","filtersTitleOrigin","leftPaneWidth","rightPaneWidth","originFacts","relations","method","selectedFactIndex","hoverFactIndex","maxStoryLength","resultCoverage","rewardWeight","generateProgress","unusedFacts","editstate","editingCurrentFact","algorithm","calSimilarityType","maximumFact","recommendedSfacts","recommendedEfacts","recommendedMfacts","layoutFlag","interpolationFlag","animationFlag","animationType","specIndex","createSelector","storyParameter","information","chartDiversity","timeLimit","selectedFact","isShouldSave","historyStory","historyfacts","historyTitle","historySubtitle","historStoryParameter","historyAggregationLevel","historyResultCoverage","isEqual","addFact","ActionType","ADD_FACT","updateFact","fact","UPDATE_FACT","insertFact","insert","INSERT_FACT","deleteFact","DELETE_FACT","deleteUnusedFact","DELETE_UNUSEDFACT","orderFacts","sourceIndex","destinationIndex","ORDER_FACTS","setHoverIndex","SET_HOVER_INDEX","updateFilters","UPDATE_FILTERS","updateFiltersTitle","UPDATE_FILTERS_TITLE","updateDatares","UPDATE_DATARES","updateSchemaFilter","UPDATE_SCHEMA_FILTER","updateFiltersChangeFlag","UPDATE_FILTERS_CHANGE_FLAG","updatePannelWidth","UPDATE_PANNEL_WIDTH","changeCurrentEditing","CHANGE_CURRENT_EDITING","updateFiltersLocal","UPDATE_FILTERS_LOCAL","addSFact","ADD_SFACT","addEFact","ADD_EFACT","addMFact","ADD_MFACT","deleteSFact","DELETE_SFACT","deleteMFact","DELETE_MFACT","deleteEFact","DELETE_EFACT","insertEmptyFact","emptyFact","INSERT_EMPTY_FACT","insertInterpolatedFacts","interpolatedFacts","INSERT_INTERPOLATED_FACTS","inserRecommendedFact","factLocation","INSERT_RECOMMENDEDFACT","selectFact","SELECT_FACT","changeMethod","CHANGE_METHOD","setStoryParameter","SET_STORY_PARAMETER","setRewardWeight","logicality","diversity","integrity","SET_REWARD_WEIGHT","setAggregationLevel","level","SET_AGGREGATION_LEVEL","generateStory","coverage","GENERATE_STORY","updateProgress","totalLength","currentLength","UPDATE_PROGRESS","exportPdf","isExportPdf","EXPORT_PDF","changeTitle","CHANGE_TITLE","updateCommentStoryInfo","UPDATE_COMMENT_STORY_INFO","changeSubTitle","CHANGE_SUBTITLE","changeToAnimation","CHANGE_TO_ANIMATION","changeAlgorithm","CHANGE_ALGORITHM","optimizeLayout","OPTIMIZE_LAYOUT","changeInterpolationFlag","CHANGE_INTERPOLATIONFLAG","undo","UNDO","redo","REDO","s2","s3","s1","m1","field","m2","m_intersection","includes","m_longer","s4","subspace1fields","subspace2fields","subspace_intersection","subspace_longer","s5","g1","g2","g_intersection","g_longer","focus1","focus2","focus_intersection","focus_longer","uploadData","UPLOAD_DATA","changeData","CHANGE_DATA","visualizeData","visData","VISUALIZE_DATA","updateDataUrl","UPDATE_DATA_URL"],"mappings":"8tDAGMA,EAAyB,SAASC,EAAUC,EAASC,GACvDC,KAAKH,SAAWA,EAChBG,KAAKF,QAAUA,EACfE,KAAKD,eAA0BE,IAAdF,EAA0BG,IAAWH,GAG1DH,EAAuBO,UAAY,CAC/BC,QAAU,SAASC,EAAOC,EAAgBC,GACtCP,KAAKQ,SAAW,GAChBR,KAAKS,MAAQ,GACbT,KAAKU,KAAO,GACZV,KAAKW,MAAQ,GAEb,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,IAAK,CACnC,IAAIR,EAAU,CACVU,MAAOT,EAAMO,GACbG,IAAKH,EACLD,MAAOC,EACPI,KAAM,GAEVhB,KAAKQ,SAASI,GAAKR,EACnBJ,KAAKW,MAAMC,GAAKR,EAChBJ,KAAKS,MAAMG,GAAK,GAChBZ,KAAKU,KAAKE,GAAK,EAGnB,IAAK,IAAIA,EAAI,EAAGA,EAAIZ,KAAKQ,SAASK,OAAQD,IACtC,IAAK,IAAIK,EAAI,EAAGA,GAAKL,EAAGK,IAAK,CACzB,IAAIC,EAAQN,IAAMK,EAAKf,IACvBF,KAAKH,SAASG,KAAKQ,SAASI,GAAGE,MAAOd,KAAKQ,SAASS,GAAGH,OACvDd,KAAKS,MAAMG,GAAGK,GAAKC,EACnBlB,KAAKS,MAAMQ,GAAGL,GAAKM,EAEfA,EAAOlB,KAAKS,MAAMG,GAAGZ,KAAKU,KAAKE,MACnCZ,KAAKU,KAAKE,GAAKK,GAOvB,IAFA,IAAIE,EAASnB,KAAKoB,eACdR,EAAI,EACDO,GACCZ,GAAeK,IAAMN,IAAoB,GAC7CC,EAAWP,KAAKQ,UAEhBW,EAASnB,KAAKoB,eASlB,OANApB,KAAKQ,SAASa,SAAQ,SAASjB,UAEpBA,EAAQW,WACRX,EAAQO,SAGZX,KAAKQ,UAGhBY,aAAc,WAGV,IADA,IAAIE,EAAS,EAAGC,EAAMrB,IACbU,EAAI,EAAGA,EAAIZ,KAAKQ,SAASK,OAAQD,IAAK,CAC3C,IAAIG,EAAMf,KAAKQ,SAASI,GAAGG,IACvBG,EAAOlB,KAAKS,MAAMM,GAAKf,KAAKU,KAAKK,IACjCG,EAAOK,IACPD,EAASP,EACTQ,EAAML,GAGd,GAAIK,GAAOvB,KAAKD,UACZ,OAAO,EAGX,IAAIyB,EAAKxB,KAAKW,MAAMW,GAChBG,EAAKzB,KAAKW,MAAMX,KAAKU,KAAKY,IAG1BH,EAAS,CACTO,KAAMF,EACNG,MAAOF,EACPV,IAAKS,EAAGT,IACRC,KAAMQ,EAAGR,KAAOS,EAAGT,MAGvBhB,KAAKQ,SAASgB,EAAGb,OAASQ,EAC1BnB,KAAKQ,SAASoB,OAAOH,EAAGd,MAAO,GAC/BX,KAAKW,MAAMa,EAAGT,KAAOI,EAGrB,IAAK,IAAIP,EAAI,EAAGA,EAAIZ,KAAKQ,SAASK,OAAQD,IAAK,CAC3C,IAAIiB,EAAK7B,KAAKQ,SAASI,GACnBM,OAAI,EACJM,EAAGT,MAAQc,EAAGd,IACdG,EAAOhB,IAEe,WAAjBF,KAAKF,SACVoB,EAAOlB,KAAKS,MAAMe,EAAGT,KAAKc,EAAGd,KACzBf,KAAKS,MAAMe,EAAGT,KAAKc,EAAGd,KAAOf,KAAKS,MAAMgB,EAAGV,KAAKc,EAAGd,OACvDG,EAAOlB,KAAKS,MAAMgB,EAAGV,KAAKc,EAAGd,OAGP,aAAjBf,KAAKF,SACVoB,EAAOlB,KAAKS,MAAMe,EAAGT,KAAKc,EAAGd,KACzBf,KAAKS,MAAMe,EAAGT,KAAKc,EAAGd,KAAOf,KAAKS,MAAMgB,EAAGV,KAAKc,EAAGd,OACvDG,EAAOlB,KAAKS,MAAMgB,EAAGV,KAAKc,EAAGd,OAI7BG,EADsB,YAAjBlB,KAAKF,SACFE,KAAKS,MAAMe,EAAGT,KAAKc,EAAGd,KAAOS,EAAGR,KAClChB,KAAKS,MAAMgB,EAAGV,KAAKc,EAAGd,KAAOU,EAAGT,OAASQ,EAAGR,KAAOS,EAAGT,MAGrDhB,KAAKH,SAASgC,EAAGf,MAAOU,EAAGV,OAGtCd,KAAKS,MAAMe,EAAGT,KAAKc,EAAGd,KAAOf,KAAKS,MAAMoB,EAAGd,KAAKS,EAAGT,KAAOG,EAK9D,IAAK,IAAIN,EAAI,EAAGA,EAAIZ,KAAKQ,SAASK,OAAQD,IAAK,CAC3C,IAAIkB,EAAO9B,KAAKQ,SAASI,GAAGG,IAC5B,GAAIf,KAAKU,KAAKoB,KAAUN,EAAGT,KAAOf,KAAKU,KAAKoB,KAAUL,EAAGV,IAAK,CAE1D,IADA,IAAIQ,EAAMO,EACDb,EAAI,EAAGA,EAAIjB,KAAKQ,SAASK,OAAQI,IAAK,CAC/C,IAAIc,EAAO/B,KAAKQ,SAASS,GAAGF,IACxBf,KAAKS,MAAMqB,GAAMC,GAAQ/B,KAAKS,MAAMqB,GAAMP,KAC1CA,EAAMQ,GAGV/B,KAAKU,KAAKoB,GAAQP,EAEtBvB,KAAKQ,SAASI,GAAGD,MAAQC,EAO7B,cAHOY,EAAGT,WAAYU,EAAGV,WAClBS,EAAGb,aAAcc,EAAGd,OAEpB,IAIR,I,QCjJMqB,EAAe,CAC1B,CACE,cAAe,eACf,cAAe,eACf,MAAS,oBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,eACf,cAAe,aACf,MAAS,qBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,cAGX,CACE,cAAe,eACf,cAAe,OACf,MAAS,uBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,QAGX,CACE,cAAe,eACf,cAAe,iBACf,MAAS,oBACT,QAAW,eACX,SAAY,QACZ,QAAW,QACX,MAAS,IAGX,CACE,cAAe,eACf,cAAe,QACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,eACf,cAAe,UACf,MAAS,qBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,WAGX,CACE,cAAe,eACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,eACf,cAAe,UACf,MAAS,qBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,WAGX,CACE,cAAe,eACf,cAAe,cACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,eACf,cAAe,QACf,MAAS,qBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,eACf,MAAS,qBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,cAGX,CACE,cAAe,aACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,OACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,iBACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,QACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,UACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,UACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,cACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,QACf,MAAS,qBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,cAGX,CACE,cAAe,OACf,cAAe,eACf,MAAS,uBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,QAGX,CACE,cAAe,OACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,OACf,cAAe,OACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,OACf,cAAe,iBACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,OACf,cAAe,QACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,OACf,cAAe,UACf,MAAS,uBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,QAGX,CACE,cAAe,OACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,OACf,cAAe,UACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,OACf,cAAe,cACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,OACf,cAAe,QACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,iBACf,cAAe,eACf,MAAS,oBACT,QAAW,eACX,SAAY,QACZ,QAAW,QACX,MAAS,IAGX,CACE,cAAe,iBACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,iBACf,cAAe,OACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,iBACf,cAAe,iBACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,iBACf,cAAe,QACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,iBACf,cAAe,UACf,MAAS,oBACT,QAAW,UACX,SAAY,QACZ,QAAW,QACX,MAAS,WAGX,CACE,cAAe,iBACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,iBACf,cAAe,UACf,MAAS,oBACT,QAAW,UACX,SAAY,QACZ,QAAW,QACX,MAAS,WAGX,CACE,cAAe,iBACf,cAAe,cACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,iBACf,cAAe,QACf,MAAS,oBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,eACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,OACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,iBACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,QACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,UACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,UACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,cACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,QACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,UACf,cAAe,eACf,MAAS,qBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,WAGX,CACE,cAAe,UACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,UACf,cAAe,OACf,MAAS,uBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,QAGX,CACE,cAAe,UACf,cAAe,iBACf,MAAS,oBACT,QAAW,UACX,SAAY,QACZ,QAAW,QACX,MAAS,WAGX,CACE,cAAe,UACf,cAAe,QACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,UACf,cAAe,UACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,UACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,UACf,cAAe,UACf,MAAS,qBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,mBAGX,CACE,cAAe,UACf,cAAe,cACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,UACf,cAAe,QACf,MAAS,aACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,WAGX,CACE,cAAe,aACf,cAAe,eACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,OACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,iBACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,QACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,UACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,UACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,cACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,aACf,cAAe,QACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,UACf,cAAe,eACf,MAAS,qBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,WAGX,CACE,cAAe,UACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,UACf,cAAe,OACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,UACf,cAAe,iBACf,MAAS,oBACT,QAAW,UACX,SAAY,QACZ,QAAW,QACX,MAAS,WAGX,CACE,cAAe,UACf,cAAe,QACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,UACf,cAAe,UACf,MAAS,qBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,mBAGX,CACE,cAAe,UACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,UACf,cAAe,UACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,UACf,cAAe,cACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,UACf,cAAe,QACf,MAAS,aACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,WAGX,CACE,cAAe,cACf,cAAe,eACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,cACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,cACf,cAAe,OACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,cACf,cAAe,iBACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,cACf,cAAe,QACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,cACf,cAAe,UACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,cACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,cACf,cAAe,UACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,cACf,cAAe,cACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,cACf,cAAe,QACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,eACf,MAAS,qBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,aACf,MAAS,qBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,cAGX,CACE,cAAe,QACf,cAAe,OACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,iBACf,MAAS,oBACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,QACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,UACf,MAAS,aACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,WAGX,CACE,cAAe,QACf,cAAe,aACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,UACf,MAAS,aACT,QAAW,QACX,SAAY,QACZ,QAAW,QACX,MAAS,WAGX,CACE,cAAe,QACf,cAAe,cACf,MAAS,gBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,IAGX,CACE,cAAe,QACf,cAAe,QACf,MAAS,qBACT,QAAW,GACX,SAAY,GACZ,QAAW,GACX,MAAS,K,OC/9BAC,EAAmB,SAASC,EAAgBC,GAErD,IADA,IAAIC,EAAQF,EAAeG,QAClB1B,EAAQ,EAAGA,EAAQyB,EAAMvB,OAAQF,IACtCyB,EAAMzB,GAAOA,MAAQA,EACrByB,EAAMzB,GAAO2B,YAAa,EAC1BF,EAAMzB,GAAO4B,eAAiB,KAGlC,IAIIC,ECnBoB,SAAfC,EAAgBC,GACzB,IAAIC,EAAQ,GACZ,IAAKD,EACD,OAAOC,EAEX,GAAID,EAAK1B,KAAO,EAAG,CACf,IAAI4B,EAAgBH,EAAaC,EAAKhB,MAClCmB,EAAiBJ,EAAaC,EAAKf,OACvCgB,EAAMG,KAAN,MAAAH,EAAK,YAASC,IACdD,EAAMG,KAAN,MAAAH,EAAK,YAASE,SACO,IAAdH,EAAK1B,KACZ2B,EAAMG,KAAK,CAACJ,EAAKhB,KAAKZ,MAAO4B,EAAKf,MAAMb,QAExC6B,EAAMG,KAAK,CAACJ,EAAK5B,QAErB,OAAO6B,EDEKF,CFgIQ,SAASpC,EAAOP,EAASC,EAAWgD,EAAUC,GAClElD,EAAUA,GAAW,UACrB,IAAIU,EAAY,IAAIZ,EAAuBqD,IAAcnD,EAASC,GAClDK,QAAQC,EAAO0C,EAAUC,GAEzC,YAAkB/C,IAAdF,EACMS,EAAS,GAEZA,EE1IK0C,CAASd,IAIGe,QAAO,SAAAC,GAAC,OAAEA,EAAEvC,OAAO,KAE3C2B,EAAYa,MAAK,SAASC,EAAGC,GAAG,OAAOC,YAAeD,EAAE,GAAIA,EAAE,IAAMC,YAAeF,EAAE,GAAIA,EAAE,OAC3F,IAfuE,EAenEG,EAAmBC,UAAUlB,EAAY3B,OAAO,GAAKsB,GACrDwB,EAAWnB,EAAYH,MAAM,EAAGoB,GAhBmC,cAiBjDE,GAjBiD,IAiBvE,2BAAgC,CAAC,IAAtBC,EAAqB,QACxBC,EAAaD,EAAQ,GAAGjD,MAAQiD,EAAQ,GAAGjD,MAAOiD,EAAQ,GAAGjD,MAAMiD,EAAQ,GAAGjD,MAC9EmD,EAAcF,EAAQ,GAAGjD,MAAQiD,EAAQ,GAAGjD,MAAOiD,EAAQ,GAAGjD,MAAMiD,EAAQ,GAAGjD,MACnFyB,EAAMyB,GAAcE,EAAgB3B,EAAMyB,GAAazB,EAAM0B,IAC7D1B,EAAM0B,GAAaxB,YAAa,EAChCF,EAAM0B,GAAavB,eAAiB,MAtB+B,8BAwBvE,OAAOH,GAGE2B,EAAkB,SAASC,EAAIC,GACxC,IAAIC,EAAOlC,EAAamB,QAAO,SAAAC,GAAC,OAAGA,EAAE,iBAAiBY,EAAGG,MAAMf,EAAE,iBAAiBa,EAAGE,QAAO,GACxFC,EAAeC,IAAEC,UAAUN,GAO/B,GANAI,EAAa9B,YAAa,EAC1B8B,EAAa7B,eAAiB8B,IAAEC,UAAUL,GAC1CG,EAAaG,aAAe,CAACP,EAAGG,KAAMF,EAAGE,MACzCC,EAAaI,cAAgBC,IAAUC,cACvCN,EAAaO,OAASP,EAAa7B,eAAeoC,MAE9CT,EAAKU,QAAUH,IAAUC,cACzB,OAAON,EAGX,GAAIF,EAAKU,QAAUH,IAAUI,kBAEzB,OADAT,EAAaI,cAAgBC,IAAUI,kBAChCT,EAEX,GAAIF,EAAKU,QAAUH,IAAUK,mBAEzB,OADAV,EAAaI,cAAgBC,IAAUK,mBAChCV,EAIX,GAAwB,UAApBF,EAAI,UAGCa,EAFU,IAAIC,IAAIhB,EAAGiB,QAAQC,KAAI,SAAA9B,GAAC,OAAEA,EAAC,UAC3B,IAAI4B,IAAIf,EAAGgB,QAAQC,KAAI,SAAA9B,GAAC,OAAEA,EAAC,WAEtC,OAAOgB,EAGf,GAAyB,UAArBF,EAAI,WAGCa,EAFW,IAAIC,IAAIhB,EAAGmB,SAASD,KAAI,SAAA9B,GAAC,OAAEA,EAAC,MAAU,KAAKA,EAAC,UAC5C,IAAI4B,IAAIf,EAAGkB,SAASD,KAAI,SAAA9B,GAAC,OAAEA,EAAC,MAAU,KAAKA,EAAC,WAExD,OAAOgB,EAGf,GAAwB,UAApBF,EAAI,UAGCa,EAFU,IAAIC,IAAIhB,EAAGoB,SACX,IAAIJ,IAAIf,EAAGmB,UAEtB,OAAOhB,EAGf,GAAsB,UAAlBF,EAAI,QAGCa,EAFQ,IAAIC,IAAIhB,EAAGqB,MAAMH,KAAI,SAAA9B,GAAC,OAAEA,EAAC,MAAU,KAAKA,EAAC,UACzC,IAAI4B,IAAIf,EAAGoB,MAAMH,KAAI,SAAA9B,GAAC,OAAEA,EAAC,MAAU,KAAKA,EAAC,WAElD,OAAOgB,EAkCf,OA9BAA,EAAaI,cAAgBN,EAAI,MACT,UAApBA,EAAI,SAA+C,KAApBA,EAAI,UAC/BF,EAAGG,OAASD,EAAI,QAChBE,EAAaa,QAAUjB,EAAGiB,QAE1Bb,EAAaa,QAAUhB,EAAGgB,SAGT,UAArBf,EAAI,UAAiD,KAArBA,EAAI,WAChCF,EAAGG,OAASD,EAAI,SAChBE,EAAae,SAAWnB,EAAGmB,SAE3Bf,EAAae,SAAWlB,EAAGkB,UAGX,UAApBjB,EAAI,SAA+C,KAApBA,EAAI,UAC/BF,EAAGG,OAASD,EAAI,QAChBE,EAAagB,QAAUpB,EAAGoB,QAE1BhB,EAAagB,QAAUnB,EAAGmB,SAGZ,UAAlBlB,EAAI,OAA2C,KAAlBA,EAAI,QAC7BF,EAAGG,OAASD,EAAI,MAChBE,EAAaiB,MAAQrB,EAAGqB,MAExBjB,EAAaiB,MAAQpB,EAAGoB,OAIzBjB,GAGX,SAASW,EAAMO,EAAIC,GACf,GAAID,EAAGtE,OAASuE,EAAGvE,KAAM,OAAO,EADb,oBAELsE,GAFK,IAEnB,gCAAShC,EAAT,QAAkB,IAAKiC,EAAGC,IAAIlC,GAAI,OAAO,GAFtB,8BAGnB,OAAO,E,WErHEmC,EAAW,SAAAC,GAAK,OAAIA,EAAMC,MAAMF,UAChCG,EAAgB,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,eACrCC,EAAQ,SAAAH,GAAK,OAAIA,EAAMC,MAAME,OAC7BC,EAAU,SAAAJ,GAAK,OAAIA,EAAMC,MAAMG,UAC/BC,EAAO,SAAAL,GAAK,OAAIA,EAAMC,MAAMI,MAC5BC,EAAS,SAAAN,GAAK,OAAIA,EAAMC,MAAMK,QAE9BC,EAAc,SAAAP,GAAK,OAAIA,EAAMC,MAAMM,aAEnCC,EAAU,SAAAR,GAAK,OAAIA,EAAMC,MAAMO,SAC/BC,EAAe,SAAAT,GAAK,OAAIA,EAAMC,MAAMQ,cACpCC,EAAU,SAAAV,GAAK,OAAIA,EAAMC,MAAMS,SAC/BC,EAAe,SAAAX,GAAK,OAAIA,EAAMC,MAAMU,cACpCC,EAAoB,SAAAZ,GAAK,OAAIA,EAAMC,MAAMW,mBAEzCC,EAAe,SAAAb,GAAK,OAAIA,EAAMC,MAAMY,cACpCC,EAAoB,SAAAd,GAAK,OAAIA,EAAMC,MAAMa,mBACzCC,EAAe,SAAAf,GAAK,OAAIA,EAAMC,MAAMc,cACpCC,EAAoB,SAAAhB,GAAK,OAAIA,EAAMC,MAAMe,mBAEzCC,EAAgB,SAAAjB,GAAK,OAAIA,EAAMC,MAAMgB,eACrCC,EAAqB,SAAAlB,GAAK,OAAIA,EAAMC,MAAMiB,oBAE1CC,EAAc,SAAAnB,GAAK,OAAEA,EAAMC,MAAMkB,eACjCC,EAAe,SAAApB,GAAK,OAAEA,EAAMC,MAAMmB,gBAEzCC,EAAc,SAAArB,GAAK,OAAIA,EAAMC,MAAMvD,OAC5B4E,EAAY,SAAAtB,GAAK,OAAIA,EAAMC,MAAMqB,WACjCC,EAAS,SAAAvB,GAAK,OAAIA,EAAMC,MAAMsB,QAC9BC,EAAoB,SAAAxB,GAAK,OAAIA,EAAMC,MAAMuB,mBACzCC,EAAiB,SAAAzB,GAAK,OAAIA,EAAMC,MAAMwB,gBACtCC,EAAiB,SAAA1B,GAAK,OAAIA,EAAMC,MAAMyB,gBAItCC,EAAiB,SAAA3B,GAAK,OAAIA,EAAMC,MAAM0B,gBACtClF,EAAmB,SAAAuD,GAAK,OAAIA,EAAMC,MAAMxD,kBACxCmF,EAAe,SAAA5B,GAAK,OAAIA,EAAMC,MAAM2B,cAGpCC,EAAmB,SAAA7B,GAAK,OAAIA,EAAMC,MAAM4B,kBAExCC,EAAc,SAAA9B,GAAK,OAAIA,EAAMC,MAAM6B,aACnCC,EAAU,SAAA/B,GAAK,OAAEA,EAAMC,MAAM8B,WAC7BC,EAAmB,SAAAhC,GAAK,OAAEA,EAAMC,MAAM+B,oBACtCC,EAAY,SAAAjC,GAAK,OAAIA,EAAMC,MAAMgC,WACjCC,EAAoB,SAAAlC,GAAK,OAAIA,EAAMC,MAAMiC,mBACzCC,EAAc,SAAAnC,GAAK,OAAIA,EAAMC,MAAMkC,aACnCC,EAAoB,SAAApC,GAAK,OAAIA,EAAMC,MAAMmC,mBACzCC,EAAoB,SAAArC,GAAK,OAAIA,EAAMC,MAAMoC,mBACzCC,EAAoB,SAAAtC,GAAK,OAAIA,EAAMC,MAAMqC,mBACzCC,GAAa,SAAAvC,GAAK,OAAIA,EAAMC,MAAMsC,YAClCC,GAAoB,SAAAxC,GAAK,OAAIA,EAAMC,MAAMuC,mBAEzCC,GAAgB,SAAAzC,GAAK,OAAIA,EAAMC,MAAMwC,eACrCC,GAAgB,SAAA1C,GAAK,OAAIA,EAAMC,MAAMyC,eACrCC,GAAY,SAAA3C,GAAK,OAAIA,EAAMC,MAAM0C,WAKjCjG,GAAQkG,YACjBvB,EACA5E,GACA,SAAU4E,EAAa5E,GACnB,OAAOF,EAAiB8E,EAAa5E,MAKhCoG,GAAiBD,YAC1BlB,GAtCuB,SAAA1B,GAAK,OAAIA,EAAMC,MAAM6C,eADlB,SAAA9C,GAAK,OAAIA,EAAMC,MAAM8C,kBAE1B,SAAA/C,GAAK,OAAIA,EAAMC,MAAM+C,aAyC1C,SAAUtB,EAAgBoB,EAAaC,EAAgBC,GACnD,MAAO,CACHtB,eAAgBA,EAChBoB,YAAaA,EACbC,eAAgBA,EAChBC,UAAWA,MAMVC,GAAeL,YACxBlG,GACA8E,GACA,SAAU9E,EAAO8E,GACb,OAAO9E,EAAM8E,MAGR0B,GAAeN,YACxBvB,EACAlB,EACAC,EACAyC,GACApG,EACAkF,GA5DwB,SAAA3B,GAAK,OAAIA,EAAMC,MAAMkD,gBA8D7C,SAAUzG,EAAOyD,EAAMC,EAAUyC,EAAgBpG,EAAkBkF,EAAgBwB,GAAe,IAE1FC,EAMAD,EANAC,aACAC,EAKAF,EALAE,aACAC,EAIAH,EAJAG,gBACAC,EAGAJ,EAHAI,qBACAC,EAEAL,EAFAK,wBACAC,EACAN,EADAM,sBAEJ,QAAK9E,IAAE+E,QAAQhH,EAAO0G,IAAkBzE,IAAE+E,QAAQvD,EAAOkD,IAAiB1E,IAAE+E,QAAQtD,EAAUkD,IAAoB3E,IAAE+E,QAAQb,EAAgBU,IACpI5E,IAAE+E,QAAQjH,EAAkB+G,IAA6B7E,IAAE+E,QAAQ/B,EAAgB8B,Q,iCCpHnG,2zBAEaE,EAAU,SAACjH,GAAD,MAAY,CAC/B+B,KAAMmF,IAAWC,SACjBnH,MAAOA,IAGEoH,EAAa,SAAC7I,EAAO8I,GAAR,MAAkB,CACxCtF,KAAMmF,IAAWI,YACjB/I,QACA8I,SAGSE,EAAa,SAAChJ,EAAOiJ,GAAR,MAAoB,CAC1CzF,KAAMmF,IAAWO,YACjBlJ,QACAiJ,WAGSE,EAAa,SAACnJ,GAAD,MAAY,CAClCwD,KAAMmF,IAAWS,YACjBpJ,UAGSqJ,EAAmB,SAACrJ,GAAD,MAAY,CACxCwD,KAAKmF,IAAWW,kBAChBtJ,UAGSuJ,EAAa,SAACC,EAAaC,GAAd,MAAoC,CAC1DjG,KAAMmF,IAAWe,YACjBF,cACAC,qBAGSE,EAAgB,SAAC3J,GAAD,MAAY,CACrCwD,KAAMmF,IAAWiB,gBACjB5J,UAGS6J,EAAc,SAACtE,GAAD,MAAY,CACnC/B,KAAMmF,IAAWmB,eACjBvE,YAESwE,EAAmB,SAACvE,GAAD,MAAiB,CAC7ChC,KAAMmF,IAAWqB,qBACjBxE,iBAESyE,EAAc,SAACxE,GAAD,MAAY,CACnCjC,KAAMmF,IAAWuB,eACjBzE,YAES0E,EAAmB,SAACzE,GAAD,MAAiB,CAC7ClC,KAAMmF,IAAWyB,qBACjB1E,iBAES2E,EAAwB,SAAC1E,GAAD,MAAsB,CACvDnC,KAAMmF,IAAW2B,2BACjB3E,sBAGS4E,EAAkB,SAACrE,EAAcC,GAAf,MAAiC,CAC5D3C,KAAMmF,IAAW6B,oBACjBtE,gBACAC,mBAGSsE,EAAqB,SAAC3D,EAAUC,GAAX,MAAiC,CAC/DvD,KAAKmF,IAAW+B,uBAChB5D,YACAC,uBAGS4D,EAAmB,SAAC/E,EAAcC,EAAmBC,EAAcC,GAAhD,MAAqE,CACjGvC,KAAMmF,IAAWiC,qBACjBhF,eACAC,oBACAC,eACAC,sBAGS8E,EAAS,SAACpJ,GAAD,MAAU,CAC5B+B,KAAKmF,IAAWmC,UAChBrJ,MAAMA,IAGGsJ,EAAS,SAACtJ,GAAD,MAAU,CAC5B+B,KAAKmF,IAAWqC,UAChBvJ,MAAMA,IAGGwJ,EAAS,SAACxJ,GAAD,MAAU,CAC5B+B,KAAKmF,IAAWuC,UAChBzJ,MAAMA,IAGG0J,EAAY,SAACnL,GAAD,MAAU,CAC/BwD,KAAKmF,IAAWyC,aAChBpL,UAGSqL,EAAY,SAACrL,GAAD,MAAU,CAC/BwD,KAAKmF,IAAW2C,aAChBtL,UAGSuL,EAAY,SAACvL,GAAD,MAAU,CAC/BwD,KAAKmF,IAAW6C,aAChBxL,UAGSyL,EAAkB,SAACxC,EAAQyC,GAAT,MAAwB,CACnDlI,KAAMmF,IAAWgD,kBACjB1C,SACAyC,cAGSE,EAA0B,SAAC3C,EAAQ4C,GAAT,MAAgC,CACnErI,KAAMmF,IAAWmD,0BACjB7C,SACA4C,sBAGSE,EAAuB,SAAC/L,EAAOiJ,EAAO+C,GAAf,MAAiC,CACjExI,KAAMmF,IAAWsD,uBACjBjM,QACAiJ,SACA+C,kB,iCC/HJ,6kBAEaE,EAAa,SAAClM,GAAD,MAAY,CAClCwD,KAAMmF,IAAWwD,YACjBnM,UAGSoM,EAAe,SAAC9F,GAAD,MAAa,CACrC9C,KAAMmF,IAAW0D,cACjB/F,WAGSgG,EAAoB,SAAC7F,EAAgBoB,EAAaC,EAAgBC,GAA9C,MAA6D,CAC1FvE,KAAMmF,IAAW4D,oBACjB9F,iBACAoB,cACAC,iBACAC,cAGSyE,EAAkB,SAACC,EAAYC,EAAWC,GAAxB,MAAuC,CAClEnJ,KAAMmF,IAAWiE,kBACjBH,aACAC,YACAC,cAGSE,EAAsB,SAACC,GAAD,MAAY,CAC3CtJ,KAAMmF,IAAWoE,sBACjBD,UAGSE,EAAgB,SAACvL,EAAO4E,EAAW4G,GAAnB,MAAiC,CAC1DzJ,KAAMmF,IAAWuE,eACjBzL,QACA4E,YACA4G,aAESE,EAAiB,SAACC,EAAaC,GAAd,MAC1B,CACI7J,KAAMmF,IAAW2E,gBACjBF,cACAC,kBAGKE,EAAY,SAACC,GAAD,MACrB,CACIhK,KAAMmF,IAAW8E,WACjBD,gBAGKE,EAAc,SAACxI,GAAD,MAAY,CACnC1B,KAAMmF,IAAWgF,aACjBzI,UAES0I,EAAyB,SAACnM,EAAO4E,EAAWjB,EAAMC,EAAQH,EAAMC,EAAUL,EAAUG,EAAe2C,EAAgBpG,EAAkBkF,GAA5G,MAAgI,CAClKlD,KAAMmF,IAAWkF,0BACjBpM,QACA4E,YACAjB,OACAC,SACAH,QACAC,WACAyC,iBACApG,mBACAkF,iBACA5B,WACAG,kBAMS6I,EAAiB,SAAC3I,GAAD,MAAe,CACzC3B,KAAMmF,IAAWoF,gBACjB5I,aAGS6I,EAAoB,SAACxG,GAAD,MAAmB,CAChDhE,KAAMmF,IAAWsF,oBACjBzG,kBAIS0G,EAAgB,SAAClH,EAAUC,EAAkBC,GAA7B,MAA4C,CACrE1D,KAAMmF,IAAWwF,iBACjBnH,YACAC,oBACAC,gBAGSkH,EAAe,SAAC9G,GAAD,MAAe,CACvC9D,KAAKmF,IAAW0F,gBAChB/G,eAGSgH,EAAwB,SAAC/G,GAAD,MAAsB,CACvD/D,KAAKmF,IAAW4F,yBAChBhH,sBAGSiH,EAAO,iBAAO,CACvBhL,KAAMmF,IAAW8F,OAGRC,EAAO,iBAAO,CACvBlL,KAAMmF,IAAWgG,Q,iCC1GrB,oEAAO,IAgBM9L,EAAiB,SAASQ,EAAIC,GAExC,IAGIsL,EAYAC,EAfAC,EAAKzL,EAAGG,OAASF,EAAGE,KAAO,EAAI,EAI/BuL,EAAK1L,EAAGiB,QAAQC,KAAI,SAAA9B,GAAC,OAAEA,EAAEuM,SACzBC,EAAK3L,EAAGgB,QAAQC,KAAI,SAAA9B,GAAC,OAAEA,EAAEuM,SAC7B,GAAkB,IAAdD,EAAG7O,QAA8B,IAAd+O,EAAG/O,OACvB0O,EAAK,MACD,CACJ,IAAIM,EAAiBH,EAAGvM,QAAO,SAAArC,GAAK,OAAI8O,EAAGE,SAAShP,MAChDiP,EAAWL,EAAG7O,OAAS+O,EAAG/O,OAAS6O,EAAKE,EAC5CL,EAAKM,EAAehP,OAASkP,EAASlP,OAKzC,IAWImP,EAXAC,EAAkBjM,EAAGmB,SAASD,KAAI,SAAA9B,GAAC,OAAEA,EAAEuM,SACvCO,EAAkBjM,EAAGkB,SAASD,KAAI,SAAA9B,GAAC,OAAEA,EAAEuM,SAC3C,GAA+B,IAA3BM,EAAgBpP,QAA2C,IAA3BqP,EAAgBrP,OACjD2O,EAAK,MACD,CACJ,IAAIW,EAAwBF,EAAgB9M,QAAO,SAAArC,GAAK,OAAIoP,EAAgBJ,SAAShP,MACjFsP,EAAkBH,EAAgBpP,OAASqP,EAAgBrP,OAASoP,EAAkBC,EAC1FV,EAAKW,EAAsBtP,OAASuP,EAAgBvP,OAKvD,IAWIwP,EAXAC,EAAKtM,EAAGoB,QACRmL,EAAKtM,EAAGmB,QACZ,GAAkB,IAAdkL,EAAGzP,QAA8B,IAAd0P,EAAG1P,OACvBmP,EAAK,MACD,CACJ,IAAIQ,EAAiBF,EAAGnN,QAAO,SAAArC,GAAK,OAAIyP,EAAGT,SAAShP,MAChD2P,EAAWH,EAAGzP,OAAS0P,EAAG1P,OAASyP,EAAKC,EAC5CP,EAAKQ,EAAe3P,OAAS4P,EAAS5P,OAKzC,IAAI6P,EAAS1M,EAAGqB,MAAMH,KAAI,SAAA9B,GAAC,OAAEA,EAAEtC,SAC3B6P,EAAS1M,EAAGoB,MAAMH,KAAI,SAAA9B,GAAC,OAAEA,EAAEtC,SAC/B,GAAsB,IAAlB4P,EAAO7P,QAAkC,IAAlB8P,EAAO9P,OAC/BwP,EAAK,MACD,CACJ,IAAIO,EAAqBF,EAAOvN,QAAO,SAAArC,GAAK,OAAI6P,EAAOb,SAAShP,MAC5D+P,EAAeH,EAAO7P,OAAS8P,EAAO9P,OAAS6P,EAASC,EAC5DN,EAAKO,EAAmB/P,OAASgQ,EAAahQ,OAIjD,MADiB,GAAI4O,EAAK,GAAIF,EAAK,GAAIC,EAAK,GAAIQ,EAAK,GAAIK,GAI/CpN,EAAe,SAASe,EAAIC,GACtC,OAAO,EAAIT,EAAeQ,EAAIC,K,iCCzEjC,mJAIa6M,EAAa,SAACrL,EAAUG,EAAeI,EAAQD,GAAlC,MAA4C,CAClE5B,KAAMmF,IAAWyH,YACjBtL,WACAG,gBACAI,SACAD,SASSiL,EAAa,SAACvL,EAAUG,GAAX,MAA8B,CACpDzB,KAAMmF,IAAW2H,YACjBxL,WACAG,kBAGSsL,EAAgB,SAACC,GAAD,MAAc,CACvChN,KAAMmF,IAAW8H,eACjBD,YAESE,EAAgB,SAACpL,GAAD,MAAkB,CAC3C9B,KAAMmF,IAAWgI,gBACjBrL","file":"static/js/6.30229c62.chunk.js","sourcesContent":["// reference: https://github.com/harthur/clustering\nimport {factDistance} from './distance';\n\nconst HierarchicalClustering = function(distance, linkage, threshold) {\n    this.distance = distance;\n    this.linkage = linkage;\n    this.threshold = threshold === undefined ? Infinity : threshold;\n}\n\nHierarchicalClustering.prototype = {\n    cluster : function(items, snapshotPeriod, snapshotCb) {\n        this.clusters = [];\n        this.dists = [];  // distances between each pair of clusters\n        this.mins = []; // closest cluster for each cluster\n        this.index = []; // keep a hash of all clusters by key\n        \n        for (let i = 0; i < items.length; i++) {\n            let cluster = {\n                value: items[i],\n                key: i,\n                index: i,\n                size: 1\n            };\n            this.clusters[i] = cluster;\n            this.index[i] = cluster;\n            this.dists[i] = [];\n            this.mins[i] = 0;\n        }\n\n        for (let i = 0; i < this.clusters.length; i++) {\n            for (let j = 0; j <= i; j++) {\n                let dist = (i === j) ? Infinity : \n                this.distance(this.clusters[i].value, this.clusters[j].value);\n                this.dists[i][j] = dist;\n                this.dists[j][i] = dist;\n\n                if (dist < this.dists[i][this.mins[i]]) {\n                this.mins[i] = j;               \n                }\n            }\n        }\n\n        let merged = this.mergeClosest();\n        let i = 0;\n        while (merged) {\n            if (snapshotCb && (i++ % snapshotPeriod) === 0) {\n            snapshotCb(this.clusters);           \n            }\n            merged = this.mergeClosest();\n        }\n        \n        this.clusters.forEach(function(cluster) {\n            // clean up metadata used for clustering\n            delete cluster.key;\n            delete cluster.index;\n        });\n\n        return this.clusters;\n    },\n\n    mergeClosest: function() {\n        // find two closest clusters from cached mins\n        let minKey = 0, min = Infinity;\n        for (let i = 0; i < this.clusters.length; i++) {\n            let key = this.clusters[i].key,\n                dist = this.dists[key][this.mins[key]];\n            if (dist < min) {\n                minKey = key;\n                min = dist;\n            }\n        }\n        if (min >= this.threshold) {\n            return false;         \n        }\n\n        let c1 = this.index[minKey],\n            c2 = this.index[this.mins[minKey]];\n\n        // merge two closest clusters\n        let merged = {\n            left: c1,\n            right: c2,\n            key: c1.key,\n            size: c1.size + c2.size\n        };\n\n        this.clusters[c1.index] = merged;\n        this.clusters.splice(c2.index, 1);\n        this.index[c1.key] = merged;\n\n        // update distances with new merged cluster\n        for (let i = 0; i < this.clusters.length; i++) {\n            let ci = this.clusters[i];\n            let dist;\n            if (c1.key === ci.key) {\n                dist = Infinity;            \n            }\n            else if (this.linkage === \"single\") {\n                dist = this.dists[c1.key][ci.key];\n                if (this.dists[c1.key][ci.key] > this.dists[c2.key][ci.key]) {\n                dist = this.dists[c2.key][ci.key];\n                }\n            }\n            else if (this.linkage === \"complete\") {\n                dist = this.dists[c1.key][ci.key];\n                if (this.dists[c1.key][ci.key] < this.dists[c2.key][ci.key]) {\n                dist = this.dists[c2.key][ci.key];              \n                }\n            }\n            else if (this.linkage === \"average\") {\n                dist = (this.dists[c1.key][ci.key] * c1.size\n                    + this.dists[c2.key][ci.key] * c2.size) / (c1.size + c2.size);\n            }\n            else {\n                dist = this.distance(ci.value, c1.value);            \n            }\n\n            this.dists[c1.key][ci.key] = this.dists[ci.key][c1.key] = dist;\n        }\n\n        \n        // update cached mins\n        for (let i = 0; i < this.clusters.length; i++) {\n            let key1 = this.clusters[i].key;        \n            if (this.mins[key1] === c1.key || this.mins[key1] === c2.key) {\n                let min = key1;\n                for (let j = 0; j < this.clusters.length; j++) {\n                let key2 = this.clusters[j].key;\n                if (this.dists[key1][key2] < this.dists[key1][min]) {\n                    min = key2;                  \n                }\n                }\n                this.mins[key1] = min;\n            }\n            this.clusters[i].index = i;\n        }\n        \n        // clean up metadata used for clustering\n        delete c1.key; delete c2.key;\n        delete c1.index; delete c2.index;\n\n        return true;\n    }\n    }\n\nexport const hcluster = function(items, linkage, threshold, snapshot, snapshotCallback) {\n    linkage = linkage || \"average\";\n    let clusters = (new HierarchicalClustering(factDistance, linkage, threshold))\n                   .cluster(items, snapshot, snapshotCallback);\n       \n    if (threshold === undefined) {\n       return clusters[0]; // all clustered into one\n    }\n    return clusters;\n}","export const factAggRules = [\n  {\n    \"Fact Type 1\": \"distribution\",\n    \"Fact Type 2\": \"distribution\",\n    \"Chart\": \"Stacked Bar Chart\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"distribution\",\n    \"Fact Type 2\": \"difference\",\n    \"Chart\": \"Vertical Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"difference\",\n    \n  },\n  {\n    \"Fact Type 1\": \"distribution\",\n    \"Fact Type 2\": \"rank\",\n    \"Chart\": \"Horizontal Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"rank\",\n    \n  },\n  {\n    \"Fact Type 1\": \"distribution\",\n    \"Fact Type 2\": \"categorization\",\n    \"Chart\": \"Isotype Bar Chart\",\n    \"Measure\": \"distribution\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"distribution\",\n    \"Fact Type 2\": \"value\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"distribution\",\n    \"Fact Type 2\": \"extreme\",\n    \"Chart\": \"Vertical Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"extreme\",\n    \n  },\n  {\n    \"Fact Type 1\": \"distribution\",\n    \"Fact Type 2\": \"proportion\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"distribution\",\n    \"Fact Type 2\": \"outlier\",\n    \"Chart\": \"Vertical Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"outlier\",\n    \n  },\n  {\n    \"Fact Type 1\": \"distribution\",\n    \"Fact Type 2\": \"association\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"distribution\",\n    \"Fact Type 2\": \"trend\",\n    \"Chart\": \"Vertical Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"difference\",\n    \"Fact Type 2\": \"distribution\",\n    \"Chart\": \"Vertical Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"difference\",\n    \n  },\n  {\n    \"Fact Type 1\": \"difference\",\n    \"Fact Type 2\": \"difference\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"difference\",\n    \"Fact Type 2\": \"rank\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"difference\",\n    \"Fact Type 2\": \"categorization\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"difference\",\n    \"Fact Type 2\": \"value\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"difference\",\n    \"Fact Type 2\": \"extreme\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"difference\",\n    \"Fact Type 2\": \"proportion\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"difference\",\n    \"Fact Type 2\": \"outlier\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"difference\",\n    \"Fact Type 2\": \"association\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"difference\",\n    \"Fact Type 2\": \"trend\",\n    \"Chart\": \"Vertical Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"difference\",\n    \n  },\n  {\n    \"Fact Type 1\": \"rank\",\n    \"Fact Type 2\": \"distribution\",\n    \"Chart\": \"Horizontal Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"rank\",\n    \n  },\n  {\n    \"Fact Type 1\": \"rank\",\n    \"Fact Type 2\": \"difference\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"rank\",\n    \"Fact Type 2\": \"rank\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"rank\",\n    \"Fact Type 2\": \"categorization\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"rank\",\n    \"Fact Type 2\": \"value\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"rank\",\n    \"Fact Type 2\": \"extreme\",\n    \"Chart\": \"Horizontal Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"rank\",\n    \n  },\n  {\n    \"Fact Type 1\": \"rank\",\n    \"Fact Type 2\": \"proportion\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"rank\",\n    \"Fact Type 2\": \"outlier\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"rank\",\n    \"Fact Type 2\": \"association\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"rank\",\n    \"Fact Type 2\": \"trend\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"categorization\",\n    \"Fact Type 2\": \"distribution\",\n    \"Chart\": \"Isotype Bar Chart\",\n    \"Measure\": \"distribution\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"categorization\",\n    \"Fact Type 2\": \"difference\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"categorization\",\n    \"Fact Type 2\": \"rank\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"categorization\",\n    \"Fact Type 2\": \"categorization\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"categorization\",\n    \"Fact Type 2\": \"value\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"categorization\",\n    \"Fact Type 2\": \"extreme\",\n    \"Chart\": \"Isotype Bar Chart\",\n    \"Measure\": \"extreme\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"extreme\",\n    \n  },\n  {\n    \"Fact Type 1\": \"categorization\",\n    \"Fact Type 2\": \"proportion\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"categorization\",\n    \"Fact Type 2\": \"outlier\",\n    \"Chart\": \"Isotype Bar Chart\",\n    \"Measure\": \"outlier\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"outlier\",\n    \n  },\n  {\n    \"Fact Type 1\": \"categorization\",\n    \"Fact Type 2\": \"association\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"categorization\",\n    \"Fact Type 2\": \"trend\",\n    \"Chart\": \"Isotype Bar Chart\",\n    \"Measure\": \"trend\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"value\",\n    \"Fact Type 2\": \"distribution\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"value\",\n    \"Fact Type 2\": \"difference\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"value\",\n    \"Fact Type 2\": \"rank\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"value\",\n    \"Fact Type 2\": \"categorization\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"value\",\n    \"Fact Type 2\": \"value\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"value\",\n    \"Fact Type 2\": \"extreme\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"value\",\n    \"Fact Type 2\": \"proportion\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"value\",\n    \"Fact Type 2\": \"outlier\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"value\",\n    \"Fact Type 2\": \"association\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"value\",\n    \"Fact Type 2\": \"trend\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"extreme\",\n    \"Fact Type 2\": \"distribution\",\n    \"Chart\": \"Vertical Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"extreme\",\n    \n  },\n  {\n    \"Fact Type 1\": \"extreme\",\n    \"Fact Type 2\": \"difference\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"extreme\",\n    \"Fact Type 2\": \"rank\",\n    \"Chart\": \"Horizontal Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"rank\",\n    \n  },\n  {\n    \"Fact Type 1\": \"extreme\",\n    \"Fact Type 2\": \"categorization\",\n    \"Chart\": \"Isotype Bar Chart\",\n    \"Measure\": \"extreme\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"extreme\",\n    \n  },\n  {\n    \"Fact Type 1\": \"extreme\",\n    \"Fact Type 2\": \"value\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"extreme\",\n    \"Fact Type 2\": \"extreme\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"extreme\",\n    \"Fact Type 2\": \"proportion\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"extreme\",\n    \"Fact Type 2\": \"outlier\",\n    \"Chart\": \"Vertical Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"extreme+outlier\",\n    \n  },\n  {\n    \"Fact Type 1\": \"extreme\",\n    \"Fact Type 2\": \"association\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"extreme\",\n    \"Fact Type 2\": \"trend\",\n    \"Chart\": \"Line Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"extreme\",\n    \n  },\n  {\n    \"Fact Type 1\": \"proportion\",\n    \"Fact Type 2\": \"distribution\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"proportion\",\n    \"Fact Type 2\": \"difference\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"proportion\",\n    \"Fact Type 2\": \"rank\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"proportion\",\n    \"Fact Type 2\": \"categorization\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"proportion\",\n    \"Fact Type 2\": \"value\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"proportion\",\n    \"Fact Type 2\": \"extreme\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"proportion\",\n    \"Fact Type 2\": \"proportion\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"proportion\",\n    \"Fact Type 2\": \"outlier\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"proportion\",\n    \"Fact Type 2\": \"association\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"proportion\",\n    \"Fact Type 2\": \"trend\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"outlier\",\n    \"Fact Type 2\": \"distribution\",\n    \"Chart\": \"Vertical Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"outlier\",\n    \n  },\n  {\n    \"Fact Type 1\": \"outlier\",\n    \"Fact Type 2\": \"difference\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"outlier\",\n    \"Fact Type 2\": \"rank\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"outlier\",\n    \"Fact Type 2\": \"categorization\",\n    \"Chart\": \"Isotype Bar Chart\",\n    \"Measure\": \"outlier\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"outlier\",\n    \n  },\n  {\n    \"Fact Type 1\": \"outlier\",\n    \"Fact Type 2\": \"value\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"outlier\",\n    \"Fact Type 2\": \"extreme\",\n    \"Chart\": \"Vertical Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"extreme+outlier\",\n    \n  },\n  {\n    \"Fact Type 1\": \"outlier\",\n    \"Fact Type 2\": \"proportion\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"outlier\",\n    \"Fact Type 2\": \"outlier\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"outlier\",\n    \"Fact Type 2\": \"association\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"outlier\",\n    \"Fact Type 2\": \"trend\",\n    \"Chart\": \"Line Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"outlier\",\n    \n  },\n  {\n    \"Fact Type 1\": \"association\",\n    \"Fact Type 2\": \"distribution\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"association\",\n    \"Fact Type 2\": \"difference\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"association\",\n    \"Fact Type 2\": \"rank\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"association\",\n    \"Fact Type 2\": \"categorization\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"association\",\n    \"Fact Type 2\": \"value\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"association\",\n    \"Fact Type 2\": \"extreme\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"association\",\n    \"Fact Type 2\": \"proportion\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"association\",\n    \"Fact Type 2\": \"outlier\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"association\",\n    \"Fact Type 2\": \"association\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"association\",\n    \"Fact Type 2\": \"trend\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"trend\",\n    \"Fact Type 2\": \"distribution\",\n    \"Chart\": \"Vertical Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"trend\",\n    \"Fact Type 2\": \"difference\",\n    \"Chart\": \"Vertical Bar Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"difference\",\n    \n  },\n  {\n    \"Fact Type 1\": \"trend\",\n    \"Fact Type 2\": \"rank\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"trend\",\n    \"Fact Type 2\": \"categorization\",\n    \"Chart\": \"Isotype Bar Chart\",\n    \"Measure\": \"trend\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"trend\",\n    \"Fact Type 2\": \"value\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"trend\",\n    \"Fact Type 2\": \"extreme\",\n    \"Chart\": \"Line Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"extreme\",\n    \n  },\n  {\n    \"Fact Type 1\": \"trend\",\n    \"Fact Type 2\": \"proportion\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"trend\",\n    \"Fact Type 2\": \"outlier\",\n    \"Chart\": \"Line Chart\",\n    \"Measure\": \"equal\",\n    \"Subspace\": \"equal\",\n    \"Groupby\": \"equal\",\n    \"Focus\": \"outlier\",\n    \n  },\n  {\n    \"Fact Type 1\": \"trend\",\n    \"Fact Type 2\": \"association\",\n    \"Chart\": \"juxtaposition\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  },\n  {\n    \"Fact Type 1\": \"trend\",\n    \"Fact Type 2\": \"trend\",\n    \"Chart\": \"Stacked Line Chart\",\n    \"Measure\": \"\",\n    \"Subspace\": \"\",\n    \"Groupby\": \"\",\n    \"Focus\": \"\",\n    \n  }\n]","import _ from 'lodash';\nimport {hcluster} from './hcluster';\nimport {getLeafNodes} from './tree';\nimport {factSimilarity} from './distance';\nimport {factAggRules} from './factAggRule';\nimport ChartType from '../constant/ChartType';\n\nexport const storyAggregation = function(original_facts, aggregationLevel) {\n    let facts = original_facts.slice();\n    for (let index = 0; index < facts.length; index++) {\n        facts[index].index = index;\n        facts[index].aggregated = false;\n        facts[index].aggregatedFact = null;\n    }\n    // Step 1. construct a hierachical cluster tree\n    let htree = hcluster(facts);\n    // Step 2. get all single leaf and double leaves\n    let nodes = getLeafNodes(htree);\n    // Step 3. filter double leaves\n    let doubleNodes = nodes.filter(x=>x.length>1);\n    // Step 4. rank according to fact similarity\n    doubleNodes.sort(function(a, b){return factSimilarity(b[0], b[1]) - factSimilarity(a[0], a[1])});\n    let aggregationCount = parseInt((doubleNodes.length+1) * aggregationLevel)\n    let aggFacts = doubleNodes.slice(0, aggregationCount);\n    for (const aggFact of aggFacts) {\n        let firstIndex = aggFact[0].index < aggFact[1].index? aggFact[0].index:aggFact[1].index;\n        let secondIndex = aggFact[0].index > aggFact[1].index? aggFact[0].index:aggFact[1].index;\n        facts[firstIndex] = factAggregation(facts[firstIndex], facts[secondIndex])\n        facts[secondIndex].aggregated = true;\n        facts[secondIndex].aggregatedFact = null;\n    }\n    return facts;\n}\n\nexport const factAggregation = function(f1, f2) {\n    let rule = factAggRules.filter(x=>(x['Fact Type 1']===f1.type&&x['Fact Type 2']===f2.type))[0]\n    let compoundFact = _.cloneDeep(f1);\n    compoundFact.aggregated = true;\n    compoundFact.aggregatedFact = _.cloneDeep(f2)\n    compoundFact.compoundType = [f1.type, f2.type];\n    compoundFact.compoundChart = ChartType.JUXTAPOSITION;\n    compoundFact.score += compoundFact.aggregatedFact.score;\n    // Step 1. check rule is juxtaposition or not\n    if (rule.chart === ChartType.JUXTAPOSITION) {\n        return compoundFact;\n    }\n    // Step 2. process stacked chart\n    if (rule.chart === ChartType.STACKED_BAR_CHART) {\n        compoundFact.compoundChart = ChartType.STACKED_BAR_CHART;\n        return compoundFact;\n    }\n    if (rule.chart === ChartType.STACKED_LINE_CHART) {\n        compoundFact.compoundChart = ChartType.STACKED_LINE_CHART;\n        return compoundFact;\n    }\n\n    // Step 3. check equal rule\n    if (rule['Measure'] === \"equal\") {\n        let measure1 = new Set(f1.measure.map(x=>x[\"field\"]));\n        let measure2 = new Set(f2.measure.map(x=>x[\"field\"]));\n        if (!eqSet(measure1, measure2)) {\n            return compoundFact;\n        }\n    }\n    if (rule['Subspace'] === \"equal\") {\n        let subspace1 = new Set(f1.subspace.map(x=>x[\"field\"]+\"++\"+x[\"value\"]));\n        let subspace2 = new Set(f2.subspace.map(x=>x[\"field\"]+\"++\"+x[\"value\"]));\n        if (!eqSet(subspace1, subspace2)) {\n            return compoundFact;\n        }\n    }\n    if (rule['Groupby'] === \"equal\") {\n        let groupby1 = new Set(f1.groupby);\n        let groupby2 = new Set(f2.groupby);\n        if (!eqSet(groupby1, groupby2)) {\n            return compoundFact;\n        }\n    }\n    if (rule['Focus'] === \"equal\") {\n        let focus1 = new Set(f1.focus.map(x=>x[\"field\"]+\"++\"+x[\"value\"]));\n        let focus2 = new Set(f2.focus.map(x=>x[\"field\"]+\"++\"+x[\"value\"]));\n        if (!eqSet(focus1, focus2)) {\n            return compoundFact;\n        }\n    }\n    // Step 4. fill fact\n    compoundFact.compoundChart = rule['Chart'];\n    if (rule['Measure'] !== \"equal\" && rule['Measure'] !== \"\") {\n        if (f1.type === rule['Measure']) {\n            compoundFact.measure = f1.measure;\n        } else {\n            compoundFact.measure = f2.measure;\n        }\n    }\n    if (rule['Subspace'] !== \"equal\" && rule['Subspace'] !== \"\") {\n        if (f1.type === rule['Subspace']) {\n            compoundFact.subspace = f1.subspace;\n        } else {\n            compoundFact.subspace = f2.subspace;\n        }\n    }\n    if (rule['Groupby'] !== \"equal\" && rule['Groupby'] !== \"\") {\n        if (f1.type === rule['Groupby']) {\n            compoundFact.groupby = f1.groupby;\n        } else {\n            compoundFact.groupby = f2.groupby;\n        }\n    }\n    if (rule['Focus'] !== \"equal\" && rule['Focus'] !== \"\") {\n        if (f1.type === rule['Focus']) {\n            compoundFact.focus = f1.focus;\n        } else {\n            compoundFact.focus = f2.focus;\n        }\n    }\n    \n    return compoundFact;\n}\n\nfunction eqSet(as, bs) {\n    if (as.size !== bs.size) return false;\n    for (var a of as) if (!bs.has(a)) return false;\n    return true;\n}","export const getLeafNodes = (tree) => {\n    let nodes = []\n    if (!tree) {\n        return nodes\n    }\n    if (tree.size > 2) {\n        let leftLeafNodes = getLeafNodes(tree.left);\n        let rightLeafNodes = getLeafNodes(tree.right);\n        nodes.push(...leftLeafNodes);\n        nodes.push(...rightLeafNodes);\n    } else if (tree.size === 2) {\n        nodes.push([tree.left.value, tree.right.value]);\n    } else {\n        nodes.push([tree.value]);\n    }\n    return nodes;\n}","import { createSelector } from 'reselect';\nimport { storyAggregation } from '../tool/factAggregation';\nimport _ from 'lodash';\nimport { convertSizeToCssValue } from 'react-split-pane/lib/SplitPane';\n// data\nexport const fileName = state => state.story.fileName;\nexport const real_filename = state => state.story.real_filename;\nexport const title = state => state.story.title;\nexport const subtitle= state => state.story.subtitle;\nexport const data = state => state.story.data;\nexport const schema = state => state.story.schema;\nexport const visData = state => state.story.visData;\nexport const generateUrl = state => state.story.generateUrl;\n//editor filters\nexport const filters = state => state.story.filters;\nexport const filtersTitle = state => state.story.filtersTitle;\nexport const datares = state => state.story.datares;\nexport const schemaFilter = state => state.story.schemaFilter;\nexport const filtersChangeFlag = state => state.story.filtersChangeFlag;\n//filters local\nexport const filtersLocal = state => state.story.filtersLocal;\nexport const filtersTitleLocal = state => state.story.filtersTitleLocal;\nexport const dataresLocal = state => state.story.dataresLocal;\nexport const schemaFilterLocal = state => state.story.schemaFilterLocal; \n//filters origin \nexport const filtersOrigin = state => state.story.filtersOrigin;\nexport const filtersTitleOrigin = state => state.story.filtersTitleOrigin;\n//pannel\nexport const leftPaneWidth=state=>state.story.leftPaneWidth;\nexport const rightPaneWidth=state=>state.story.rightPaneWidth;\n// story\nconst originFacts = state => state.story.facts;\nexport const relations = state => state.story.relations;\nexport const method = state => state.story.method;\nexport const selectedFactIndex = state => state.story.selectedFactIndex;\nexport const hoverFactIndex = state => state.story.hoverFactIndex;\nexport const maxStoryLength = state => state.story.maxStoryLength;\nexport const chartDiversity = state => state.story.chartDiversity;\nexport const information = state => state.story.information;\nexport const timeLimit = state => state.story.timeLimit;\nexport const resultCoverage = state => state.story.resultCoverage;\nexport const aggregationLevel = state => state.story.aggregationLevel;\nexport const rewardWeight = state => state.story.rewardWeight;\nexport const uuid = state => state.story.uuid;\nexport const historyStory = state => state.story.historyStory;\nexport const generateProgress = state => state.story.generateProgress;\nexport const isExportPdf = state => state.story.isExportPdf;\nexport const unusedFacts = state => state.story.unusedFacts;\nexport const editstate=state=>state.story.editstate;\nexport const editingCurrentFact=state=>state.story.editingCurrentFact\nexport const algorithm = state => state.story.algorithm\nexport const calSimilarityType = state => state.story.calSimilarityType\nexport const maximumFact = state => state.story.maximumFact\nexport const recommendedSfacts = state => state.story.recommendedSfacts\nexport const recommendedEfacts = state => state.story.recommendedEfacts\nexport const recommendedMfacts = state => state.story.recommendedMfacts\nexport const layoutFlag = state => state.story.layoutFlag\nexport const interpolationFlag = state => state.story.interpolationFlag\n// to animation\nexport const animationFlag = state => state.story.animationFlag;\nexport const animationType = state => state.story.animationType;\nexport const specIndex = state => state.story.specIndex;\n// export const facts = state => {\n//     return storyAggregation(state.story.facts, state.story.aggregationLevel)\n// }\n\nexport const facts = createSelector(\n    originFacts,\n    aggregationLevel,\n    function (originFacts, aggregationLevel) {\n        return storyAggregation(originFacts, aggregationLevel)\n    }\n)\n\n\nexport const storyParameter = createSelector(\n    maxStoryLength,\n    information,\n    chartDiversity,\n    timeLimit,\n    function (maxStoryLength, information, chartDiversity, timeLimit) {\n        return {\n            maxStoryLength: maxStoryLength,\n            information: information,\n            chartDiversity: chartDiversity,\n            timeLimit: timeLimit,\n        }\n    }\n)\n\n// fact\nexport const selectedFact = createSelector(\n    facts,\n    selectedFactIndex,\n    function (facts, selectedFactIndex) {\n        return facts[selectedFactIndex]\n    }\n)\nexport const isShouldSave = createSelector(\n    originFacts,\n    title,\n    subtitle,\n    storyParameter,\n    aggregationLevel,\n    resultCoverage,\n    historyStory,\n    function (facts, title,subtitle, storyParameter, aggregationLevel, resultCoverage, historyStory) {\n        let {\n            historyfacts,\n            historyTitle,\n            historySubtitle,\n            historStoryParameter,\n            historyAggregationLevel,\n            historyResultCoverage\n        } = historyStory\n        if (!_.isEqual(facts, historyfacts) || !_.isEqual(title, historyTitle) ||!_.isEqual(subtitle, historySubtitle)|| !_.isEqual(storyParameter, historStoryParameter)\n            || !_.isEqual(aggregationLevel, historyAggregationLevel) || !_.isEqual(resultCoverage, historyResultCoverage)) {\n            // console.log(\"有变化\")\n            return true\n        }\n        // console.log(\"无变化\")\n        return false\n    }\n)","import ActionType from './type';\n\nexport const addFact = (facts) => ({\n    type: ActionType.ADD_FACT,\n    facts: facts\n})\n\nexport const updateFact = (index, fact) => ({\n    type: ActionType.UPDATE_FACT,\n    index,\n    fact,\n})\n\nexport const insertFact = (index, insert) => ({\n    type: ActionType.INSERT_FACT,\n    index,\n    insert,\n})\n\nexport const deleteFact = (index) => ({\n    type: ActionType.DELETE_FACT,\n    index,\n})\n\nexport const deleteUnusedFact = (index) => ({\n    type:ActionType.DELETE_UNUSEDFACT,\n    index,\n})\n\nexport const orderFacts = (sourceIndex, destinationIndex) => ({\n    type: ActionType.ORDER_FACTS,\n    sourceIndex,\n    destinationIndex,\n})\n\nexport const setHoverIndex = (index) => ({\n    type: ActionType.SET_HOVER_INDEX,\n    index\n})\n\nexport const updateFilters=(filters)=>({\n    type: ActionType.UPDATE_FILTERS,\n    filters\n})\nexport const updateFiltersTitle=(filtersTitle)=>({\n    type: ActionType.UPDATE_FILTERS_TITLE,\n    filtersTitle\n})\nexport const updateDatares=(datares)=>({\n    type: ActionType.UPDATE_DATARES,\n    datares\n})\nexport const updateSchemaFilter=(schemaFilter)=>({\n    type: ActionType.UPDATE_SCHEMA_FILTER,\n    schemaFilter\n})\nexport const updateFiltersChangeFlag=(filtersChangeFlag)=>({\n    type: ActionType.UPDATE_FILTERS_CHANGE_FLAG,\n    filtersChangeFlag\n})\n\nexport const updatePannelWidth=(leftPaneWidth,rightPaneWidth)=>({\n    type: ActionType.UPDATE_PANNEL_WIDTH,\n    leftPaneWidth,\n    rightPaneWidth\n})\n\nexport const changeCurrentEditing=(editstate,editingCurrentFact)=>({\n    type:ActionType.CHANGE_CURRENT_EDITING,\n    editstate,\n    editingCurrentFact\n})\n\nexport const updateFiltersLocal=(filtersLocal, filtersTitleLocal, dataresLocal, schemaFilterLocal)=>({\n    type: ActionType.UPDATE_FILTERS_LOCAL,\n    filtersLocal,\n    filtersTitleLocal,\n    dataresLocal,\n    schemaFilterLocal\n}) \n\nexport const addSFact=(facts)=>({\n    type:ActionType.ADD_SFACT,\n    facts:facts\n})\n\nexport const addEFact=(facts)=>({\n    type:ActionType.ADD_EFACT,\n    facts:facts\n})\n\nexport const addMFact=(facts)=>({\n    type:ActionType.ADD_MFACT,\n    facts:facts\n})\n\nexport const deleteSFact=(index)=>({\n    type:ActionType.DELETE_SFACT,\n    index\n})\n\nexport const deleteMFact=(index)=>({\n    type:ActionType.DELETE_MFACT,\n    index\n})\n\nexport const deleteEFact=(index)=>({\n    type:ActionType.DELETE_EFACT,\n    index\n})\n\nexport const insertEmptyFact = (insert, emptyFact) => ({\n    type: ActionType.INSERT_EMPTY_FACT,\n    insert,\n    emptyFact\n})\n\nexport const insertInterpolatedFacts = (insert, interpolatedFacts) => ({\n    type: ActionType.INSERT_INTERPOLATED_FACTS,\n    insert,\n    interpolatedFacts\n})\n\nexport const inserRecommendedFact = (index, insert,factLocation) => ({\n    type: ActionType.INSERT_RECOMMENDEDFACT,\n    index,\n    insert,\n    factLocation\n})","import ActionType from './type';\n\nexport const selectFact = (index) => ({\n    type: ActionType.SELECT_FACT,\n    index\n})\n\nexport const changeMethod = (method) => ({\n    type: ActionType.CHANGE_METHOD,\n    method,\n})\n\nexport const setStoryParameter = (maxStoryLength, information, chartDiversity, timeLimit) => ({\n    type: ActionType.SET_STORY_PARAMETER,\n    maxStoryLength,\n    information,\n    chartDiversity,\n    timeLimit,\n})\n\nexport const setRewardWeight = (logicality, diversity, integrity) => ({\n    type: ActionType.SET_REWARD_WEIGHT,\n    logicality,\n    diversity,\n    integrity,\n})\n\nexport const setAggregationLevel = (level) => ({\n    type: ActionType.SET_AGGREGATION_LEVEL,\n    level,\n})\n\nexport const generateStory = (facts, relations, coverage) => ({\n    type: ActionType.GENERATE_STORY,\n    facts,\n    relations,\n    coverage,\n})\nexport const updateProgress = (totalLength, currentLength) => (\n    {\n        type: ActionType.UPDATE_PROGRESS,\n        totalLength,\n        currentLength\n    }\n)\nexport const exportPdf = (isExportPdf) => (\n    {\n        type: ActionType.EXPORT_PDF,\n        isExportPdf\n    }\n)\nexport const changeTitle = (title) => ({\n    type: ActionType.CHANGE_TITLE,\n    title,\n})\nexport const updateCommentStoryInfo = (facts, relations, data, schema, title,subtitle, fileName, real_filename, storyParameter, aggregationLevel, resultCoverage) => ({\n    type: ActionType.UPDATE_COMMENT_STORY_INFO,\n    facts,\n    relations,\n    data,\n    schema,\n    title,\n    subtitle,\n    storyParameter,\n    aggregationLevel,\n    resultCoverage,\n    fileName,\n    real_filename\n})\nexport const updateUUID = (uuid) => ({\n    type: ActionType.UPDATE_UUID,\n    uuid,\n})\nexport const changeSubTitle = (subtitle) => ({\n    type: ActionType.CHANGE_SUBTITLE,\n    subtitle,\n})\n// new \nexport const changeToAnimation = (animationFlag)=> ({\n    type: ActionType.CHANGE_TO_ANIMATION,\n    animationFlag\n})\n\n// algorithm\nexport const changeAlgorithm=(algorithm,calSimilarityType,maximumFact)=>({\n    type: ActionType.CHANGE_ALGORITHM,\n    algorithm,\n    calSimilarityType,\n    maximumFact\n})\n\nexport const optimizeLayout=(layoutFlag)=>({\n    type:ActionType.OPTIMIZE_LAYOUT,\n    layoutFlag\n})\n\nexport const changeInterpolationFlag=(interpolationFlag)=>({\n    type:ActionType.CHANGE_INTERPOLATIONFLAG,\n    interpolationFlag\n})\n\nexport const undo = () => ({\n    type: ActionType.UNDO\n})\n\nexport const redo = () => ({\n    type: ActionType.REDO\n})","export const euclidean = function(v1, v2) {\n    var total = 0;\n    for (var i = 0; i < v1.length; i++) {\n       total += Math.pow(v2[i] - v1[i], 2);      \n    }\n    return Math.sqrt(total);\n}\n\nexport const manhattan = function(v1, v2) {\n   var total = 0;\n   for (var i = 0; i < v1.length ; i++) {\n      total += Math.abs(v2[i] - v1[i]);      \n   }\n   return total;\n}\n\nexport const factSimilarity = function(f1, f2) {\n   // 1. fact\n   let s1 = f1.type === f2.type ? 1 : 0;\n\n   // 2. measure\n   let s2\n   let m1 = f1.measure.map(x=>x.field);\n   let m2 = f2.measure.map(x=>x.field);\n   if (m1.length === 0 && m2.length === 0) {\n      s2 = 1 // no measure\n   } else {\n      let m_intersection = m1.filter(value => m2.includes(value));\n      let m_longer = m1.length > m2.length ? m1 : m2;\n      s2 = m_intersection.length / m_longer.length;\n   }\n\n   // 3. subspace\n   let s3\n   let subspace1fields = f1.subspace.map(x=>x.field);\n   let subspace2fields = f2.subspace.map(x=>x.field);\n   if (subspace1fields.length === 0 && subspace2fields.length === 0) {\n      s3 = 1 // subspace is whole data\n   } else {\n      let subspace_intersection = subspace1fields.filter(value => subspace2fields.includes(value));\n      let subspace_longer = subspace1fields.length > subspace2fields.length ? subspace1fields : subspace2fields;\n      s3 = subspace_intersection.length / subspace_longer.length;\n   }\n\n   // 4. groupby\n   let s4;\n   let g1 = f1.groupby;\n   let g2 = f2.groupby;\n   if (g1.length === 0 && g2.length === 0) {\n      s4 = 1;\n   } else {\n      let g_intersection = g1.filter(value => g2.includes(value));\n      let g_longer = g1.length > g2.length ? g1 : g2;\n      s4 = g_intersection.length / g_longer.length;\n   }\n   \n   // 5. focus\n   let s5;\n   let focus1 = f1.focus.map(x=>x.value);\n   let focus2 = f2.focus.map(x=>x.value);\n   if (focus1.length === 0 && focus2.length === 0) {\n      s5 = 0; // no focus\n   } else {\n      let focus_intersection = focus1.filter(value => focus2.includes(value))\n      let focus_longer = focus1.length > focus2.length ? focus1 : focus2\n      s5 = focus_intersection.length / focus_longer.length\n   }\n\n   let similarity = 0.2*s1 + 0.2*s2 + 0.2*s3 + 0.2*s4 + 0.2*s5;\n   return similarity;\n}\n\nexport const factDistance = function(f1, f2) {\n   return 1 - factSimilarity(f1, f2)\n}","import ActionType from './type';\n\n\n\nexport const uploadData = (fileName, real_filename, schema, data) => ({\n    type: ActionType.UPLOAD_DATA,\n    fileName,\n    real_filename,\n    schema,\n    data\n})\nexport const connectData = (fileName, real_filename, schema, data) => ({\n    type: ActionType.CONNECT_DATA,\n    fileName,\n    real_filename,\n    schema,\n    data\n})\nexport const changeData = (fileName, real_filename) => ({\n    type: ActionType.CHANGE_DATA,\n    fileName,\n    real_filename\n})\n\nexport const visualizeData = (visData) => ({\n    type: ActionType.VISUALIZE_DATA,\n    visData\n})\nexport const updateDataUrl = (generateUrl) => ({\n    type: ActionType.UPDATE_DATA_URL,\n    generateUrl\n})\n"],"sourceRoot":""}